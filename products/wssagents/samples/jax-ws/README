/**
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved
 *
 * The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://opensso.dev.java.net/public/CDDLv1.0.html or
 * opensso/legal/CDDLv1.0.txt
 * See the License for the specific language governing
 * permission and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL
 * Header Notice in each file and include the License file
 * at opensso/legal/CDDLv1.0.txt.
 * If applicable, add the following below the CDDL Header,
 * with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * $Id: README,v 1.6 2009-08-11 07:14:43 mrudul_uchil Exp $
 */

 %% Contents:
    %% 1. General Description and Assumption
    %% 2. Environment requirements
    %% 3. Building and Deploying the un-secured samples
    %% 4. Building and Deploying the secured samples
    %% 5. OpenSSO Server Configuration
    %% 6. Testing the samples
    %% 7. Explanation of changes for Tomcat
    

%% 1. General Description and Assumption

General Description :
   The samples provided here are JAX-WS based Web Service and a Web Services
   Client.

   The sample demonstrates a simple stock quote service where given
   a stock ticker symbol it obtains stock data. The secure communication
   between stock quote web services client is achieved using
   OpenSSO web services security agents.

   The following diagram depicts a simple deployment scenario where the
   profiles of WSC and WSP are all hosted on a single OpenSSO instance.

     JAX-WS Compliant Container 1       JAX-WS Compliant Container 2
           _______________                   ________________
          |              |                  |               |
          |              |                  |               |
          |     WSC      |<---------------->|     WSP       |
          |(Stock Client)|                  |(Stock Service)|
          |              |<---------------->|               |
          |______________|    |      |      |_______________|
                              |      |
               Machine 1      |      |           Machine 2
                            __V______V_
                            |          |
                            |          | Machine 3
                            | OpenSSO  | 
                            |(WSC,WSP  |
                            | Profiles)|
                            |__________|

Assumption :
   1) You have installed and configured OpenSSO server.
   2) OpenSSO server runs in the same domain (example, ".sun.com") as the domain
      of the server in which WSC application is running. This is required for
      SSO between OpenSSO server and WSC application, when end user
      authentication happens in showcasing Web Service Security between WSC and
      WSP.

%% 2. Environment requirements

   2.1 Ant (version "1.6.5" or higher)
       The OpenSSO Web Services Security Agents workspace uses Apache Ant as the
       build tool. The build scripts in this workspace use features not present
       in releases of Ant prior to 1.6.  Thus, in order to build this workspace
       you must have Ant version 1.6.5 or above installed and available in your
       system path.
       Set the ANT_HOME environment variable to the Ant root directory, and add
       ${ANT_HOME}/bin to your PATH environment variable.

   2.2 JDK 1.6 (version "1.6.0_12" or higher)
       The sources in this workspace should be compiled using JDK "1.6.0_12" or 
       higher with the source and target levels set to "1.6.0_12" or higher.
       In order to allow this, you must ensure that JDK "1.6.0_12" or higher is
       present in your system path and the JAVA_HOME environment variable is
       setup correctly pointing to its location.
       All the deployment containers should be also running with JDK "1.6.0_12" 
       or higher so that the runtime JDK version would be same as the compile
       time JDK version.

   2.3 JAX-WS Library
       Download the latest stable version of JAXWS Reference Implementation from
       http://jax-ws.dev.java.net. 
       Execute the downloaded jar with the command : java -jar <filename>.jar
       After the files have been extracted, note the location of the lib folder
       found within the extracted folder and use this value for the
       "jaxws.lib" property within the
       <wssagents_unzip_location>/samples/jaxws.properties
       file for the Web Service Client and Web Service Provider.

   2.4 [Only for deployment on Tomcat container]

       To make Tomcat 6.x JAX-WS aware, edit the <TOMCAT_HOME>/conf/
       catalina.properties file and set the shared.loader property as shown:

       shared.loader=<jaxws_install_location>/lib/*.jar

       If you are running multiple instances of Tomcat, then edit
       <CATALINA_BASE>/conf/catalina.properties for that particular instance.

   2.5 [Only for deployment on JBoss container]

       2.5.1 To make JBoss 5.x JAX-WS aware, download JBossWS, the JBoss Web
             Services stack (Metro/Apache CXF version 3.1.1.GA).
             The version of JBossWS needed depends on the version of JBoss
             Application Server that you are running.
       2.5.2 To install the stack downloaded in the previous step, unzip the
             downloaded file and modify the file ant.properties.example by
             providing the JBOSS_HOME value based on the version of JBoss you
             are using. All the other values can be left to default. Save the
             file as ant.properties in the same location.
       2.5.3 Run the ant target deploy-jbossxxx where xxx is the version of
             JBoss.
             For example, if you are using JBoss 5.0.0.GA, the command would be:
             ant deploy-jboss500
             Refer to the JBoss website for detailed installation instructions.
   
%% 3. [Optional] If Building and Deploying the Un-Secured Samples,
      then follow this section, else go to section 4.

   3.1 cd <wssagents_unzip_location>/samples/StockService
       If you plan to deploy on Tomcat, then run "ant tomcat-war" Else
       run "ant war".
       This will generate StockService.war under "dist" directory, deploy this
       war on any JAX-WS compliant container running with JDK "1.6.0_12" or
       higher.

   3.2 cd <wssagents_unzip_location>/samples/StockClient
       [If your deployment container is Tomcat, then first run "ant tomcat-build"]
       The protocol, host and port number of the container where the
       StockService is deployed, will need to be changed in,
	   src/com/sun/stockquote/GetQuote.java for "wsdlLocation".

   3.3 cd <wssagents_unzip_location>/samples/StockClient
       If your deployment container is Tomcat, then run "ant tomcat-war" Else
       run "ant war".
       This will generate StockClient.war under "dist" directory, deploy this
       war on any JAX-WS compliant container running with JDK "1.6.0_12" or
       higher.

   The WARs generated above can be deployed on GlassFish v2.x, WebLogic 10.x,
   JBoss 5.x, Tomcat 6.x & WebSphere 7.x, all running with JDK "1.6.0_12" or
   higher.

%% 4. Building and Deploying the Secured Samples

   4.1 Follow section II A in the <wssagents_unzip_location>/README file 
       (if you have not done already) to add the keystore related files to 
       the local file system, as explained in the Step 1 of Section II A and to 
       modify the <wssagents_unzip_location>/config/AMConfig.properties file,
       as explained in the Step 2 of Section II A.

   4.2 cd <wssagents_unzip_location>/samples/StockService
       If you plan to deploy on Tomcat, then run "ant tomcat-secure-war" Else
       run "ant secure-war".
       This will generate StockService.war under "dist" directory, deploy this
       war on any JAX-WS compliant container running with JDK "1.6.0_12" or
       higher.

   4.3 cd <wssagents_unzip_location>/samples/StockClient
       [If your deployment container is Tomcat, then first run "ant tomcat-secure-build"]
       The protocol, host and port number of the container where the
       StockService is deployed, will need to be changed in,
	   src/com/sun/stockquote/GetQuote.java for "wsdlLocation".

   4.4 cd <wssagents_unzip_location>/samples/StockClient
       If your deployment container is Tomcat, then run "ant tomcat-secure-war"
       Else run "ant secure-war".
       This will generate StockClient.war under "dist" directory, deploy this
       war on any JAX-WS compliant container running with JDK "1.6.0_12" or
       higher.

   The WARs generated above can be deployed on GlassFish v2.x, WebLogic 10.x,
   JBoss 5.x, Tomcat 6.x & WebSphere 7.x, all running with JDK "1.6.0_12" or
   higher.
   
%% 5. OpenSSO Server Configuration

   Login into the OpenSSO Console with user amadmin and <amadmin password>,
   invoking following URL

   openssoserver_protocol://openssoserver_host:openssoserver_port/
                                                        openssoserver_deploy_uri

   Note: If you have logged in as any other user, click Logout on the console
         page and Login again and make sure that you access the OpenSSO Console.

   5.1 Configuring cookie encode property (If you have not done already)

       5.1.1 Go to Configuration -> Servers and Sites -> Default Server Settings ->
       5.1.2 Click on "Advanced" tab and set property value for
             "com.iplanet.am.cookie.c66Encode" property to be "true".
       5.1.3 Save changes.

   5.2 Enabling STS Security for WSC profile in OpenSSO

       By default, this sample will use the default WSC and WSP profiles that
       OpenSSO ships with (named as "wsc" and "wsp" respectively).

       5.2.1 Go to Access Control -> Default realm -> Agents ->
       5.2.2 Select Web Service Client -> click on "wsc" profile to edit ->
       5.2.3 Select required Security Mechanism as "STSSecurity"
       5.2.4 Select STS Configuration as "SecurityTokenService"
       5.2.5 Save changes.
    
   Logout of OpenSSO and Restart the container.

%% 6. Testing the Samples

   6.1 From your web browser, access <protocol>://<host>:<port>/StockClient

   6.2 With unsecure Samples, you should be directed to the page with a simple
       form to enter the Stock Symbol of your choice. Click Get Quote button.
       The StockService should return the stock results. On this page,
       click on the links named Request and Response in the image illustrating
       the communication. You should see the SOAP request and response without
       any security token in the SOAP request/response headers.

   6.3 With the secure Samples, you will be redirected to OpenSSO's Authentication
       service for end user login. Enter any existing OpenSSO user with the 
       password. Upon successful end user authentication, you will be redirected 
       back to <protocol>://<host>:<port>/StockClient/ page. Click Get Quote for
       a symbol of your choice and by clicking on the Request/Response links on
       the stock quote results page, you can see the Web Service communication
       is secured with WS-Security token in the SOAP request/response headers.

%% 7. Explanation of changes for Tomcat

   7.1 StockService WAR

       7.1.1 Because Tomcat is a Web Container (not a Java EE container) and
             does not support JSR 109 service endpoint, the JAX-WS service WAR
             deployed in Tomcat needs a special deployment descriptor which
             defines a set of "endpoints". This
             descriptor is the XML file - <wssagents_unzip_location>/samples/etc
             /Tomcat/StockService/sun-jaxws.xml. This file describes
             the JAX-WS service endpoint which represents a web particular
             published web service (StockService), and is copied to
             <wssagents_unzip_location>/samples/StockService/web/WEB-INF/ folder.
       7.1.2 The Web Service servlet in the web.xml file needs to be configured
             to the com.sun.xml.ws.transport.http.servlet.WSServlet class from
             JAX-WS Reference implementation that comes with JAX-WS libraries
             after download and install of JAX-WS RI. Hence
             <wssagents_unzip_location>/samples/StockService/web/WEB-INF/web.xml
             file is replaced with <wssagents_unzip_location>/samples/etc/Tomcat
             /StockService/web.xml file.

   7.2 StockClient WAR

       7.2.1 The @WebServiceRef and @HandlerChain annotations are not supported
             by Tomcat and hence, the web service reference and jax-ws handler
             chain needs to be invoked programmatically by making the required
             changes to the implementation class.
             Due to this, <wssagents_unzip_location>/samples/StockClient/src/
             com/sun/stockquote/GetQuote.java is replaced with
             <wssagents_unzip_location>/samples/etc/Tomcat/StockClient/
             unsecure/GetQuote.java for Unsecure applicaton WAR OR it is
             replaced with <wssagents_unzip_location>/samples/etc/Tomcat/
             StockClient/secure/GetQuote.java for Secure applicaton WAR.

             The ..secure/GetQuote.java has following additional line over
             ..unsecure/GetQuote.java.

             handlerChain.add(new com.sun.identity.wssagents.jaxws.client.ClientHandler());

             This line is required by Client application in order to invoke the
             WSS Client Handler for securing outgoing Web Service requests.

