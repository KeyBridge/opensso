/**
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved
 *
 * The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://opensso.dev.java.net/public/CDDLv1.0.html or
 * opensso/legal/CDDLv1.0.txt
 * See the License for the specific language governing
 * permission and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL
 * Header Notice in each file and include the License file
 * at opensso/legal/CDDLv1.0.txt.
 * If applicable, add the following below the CDDL Header,
 * with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * $Id: README,v 1.1 2009-07-25 01:11:03 Kamna Exp $
 */

 %% Contents:
    %% 1. General Description
    %% 2. Build requirements
    %% 3. Library dependencies
    %% 4. Building and Deploying the un-secured samples
    %% 5. Building and Deploying the secured samples
    %% 6. Configuring WSC and WSP profiles in OpenSSO
    %% 7. Testing the samples
    %% 8. Building the samples for Tomcat
    %% 9. Preparing JBoss for JAX-WS
    %% 10. Pre-Built WAR Files 
    

%% 1. General Description

The samples provided here are JAX-WS based web service and a web services
client.

The sample demonstrates a simple stock quote service where given
a stock ticker symbol it obtains stock data. The secure communication
between stock quote web services client is achieved using 
OpenSSO web services security agents.

The following diagram depicts a simple deployment scenario where the 
profiles of WSC and WSP are all hosted on a single OpenSSO instance

     JAX-WS Compliant Container 1       JAX-WS Compliant Container 2
           _______________                   ________________
          |              |                  |               |
          |              |                  |               |
          |     WSC      |<---------------->|     WSP       |
          |(Stock Client)|                  |(Stock Service)|
          |              |<---------------->|               |
          |______________|    |      |      |_______________|
                              |      |
               Machine 1      |      |           Machine 2
                            __V______V_
                            |          |
                            |          | Machine 3
                            | OpenSSO  | 
                            |(WSC,WSP  |
                            | Profiles)|
                            |__________|

%% 2. Build requirements

The OpenSSO Web Services Security Agents workspace uses Apache Ant as the build
tool. The build scripts in this workspace use features not present in releases 
of Ant prior to 1.6.  Thus, in order to build this workspace you must have 
Ant version 1.6.5 or above installed and available in your system path.
Set the ANT_HOME environment variable to the Ant root directory, and add 
${ANT_HOME}/bin to your PATH environment variable.

The sources in this workspace should be compiled using JDK 6.0 with the source
and target levels set to "1.6". In order to allow this, you must ensure that
JDK 6.0 is present in your system path and the JAVA_HOME environment variable
is setup correctly pointing to its location.

%% 3. Library dependencies

   3.1 Download the latest stable version of JAXWS Reference Implementation from
       http://jax-ws.dev.java.net. Execute the jar as
       java -jar <filename>.jar and copy the location of the lib
       folder, as the value of the "jaxws.lib" property, to the jaxws.properties
       file for the Web-Service and Client.   
   
%% 4. Building and Deploying the un-secured samples

The workspace build system offers many build targets. You can view the
available targets by issuing the ant command from the root of the
workspace. The default target that is executed is the usage target which
displays a brief description about the other targets. Currently the main
targets available in the workspace are:
 
     - clean              : Deletes all generated artifacts
     - generate-from-wsdl : Generates web-service stubs from wsdl to be used by 
                            the service and the client
     - compile            : Compiles all files in the project
     - prepare-to-build   : Copy all artifacts to the "web" folder to be
                            included in the WAR
     - war                : Creates the deployable WAR with no security
     - secure-war         : Creates the deployable WAR with security 
     - all                : Runs all the targets in the above order
     - usage              : Displays this usage message

Build the un-secure WARs by running "ant war" from
<wssagent_unzip_location>/samples/StockService for WSP and
<wssagent_unzip_location>/samples/StockClient for WSC.

The WARs generated above can be deployed on GlassFish 2.x, WebLogic 10.x, 
JBoss 5.x, Tomcat 6.x & WebSphere 7.x with just one change - 
The port number of the container where the WSP is deployed will need to be 
changed in 1 place. 
	i. WSC Source - GetQuote.java 
	   @WebServiceRef(wsdlLocation =
        "http://localhost:8080/StockService/StockService?wsdl")        
           
NOTE: Except JBoss and Tomcat, all the other containers ship with JAXWS jars. 
Hence, no configuration change is needed to deploy the web-service on GlassFish, 
WebLogic & WebSphere. For special instructions on how to make Tomcat and JBoss
suitable for web-services, refer Sections 8 and 9 of this file.

%% 5. Building and Deploying the secured samples

   5.1 Modify the AMConfig.properties file found in <wssagent_unzip_location>/
       config/ folder as explained in the Step 2 of Section II A in the README
       file provided with the openssowssagents.zip download.
   5.2 Modify the <wssagent_unzip_location>/config/server_handlers.xml file by
       adding the LogServerHandler mapping to the handler chain as explained in
       Step 4 of section II B so that the final <wssagent_unzip_location>/
       config/server_handlers.xml has the following contents:

       <?xml version="1.0" encoding="UTF-8"?>
       <handler-chains xmlns="http://java.sun.com/xml/ns/javaee"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                javaee_web_services_1_2.xsd">

        <handler-chain>
            <protocol-bindings>##SOAP11_HTTP</protocol-bindings>
            <handler>
                <handler-name>ServerHandler</handler-name>
                <handler-class>
                    com.sun.identity.wssagents.jaxws.server.ServerHandler
                </handler-class>
            </handler>
            <handler>
                <handler-name>LogServerHandler</handler-name>
                <handler-class>com.sun.stockquote.LogServerHandler</handler-class>
            </handler>
        </handler-chain>
       </handler-chains>

   5.3 Modify the <wssagent_unzip_location>/config/client_handlers.xml file by
       adding the LogClientHandler mapping to the handler chain as explained in
       Step 4 of section II C. The final version of <wssagent_unzip_location>
       /config/client_handlers.xml should be as shown here:

       <?xml version="1.0" encoding="UTF-8"?>
       <handler-chains xmlns="http://java.sun.com/xml/ns/javaee"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                javaee_web_services_1_2.xsd">

        <handler-chain>
            <protocol-bindings>##SOAP11_HTTP</protocol-bindings>
            <handler>
                <handler-name>ClientHandler</handler-name>
                <handler-class>
                    com.sun.identity.wssagents.jaxws.client.ClientHandler
                </handler-class>
            </handler>
            <handler>
                <handler-name>LogServerHandler</handler-name>
                <handler-class>com.sun.stockquote.LogClientHandler</handler-class>
            </handler>
        </handler-chain>
       </handler-chains>

   5.4 Un-comment the following lines in the 
       <wssagent_unzip_location>/samples/StockClient/web/WEB-INF/web.xml file -

       <filter>
      		<filter-name>LoginFilter</filter-name>
      		<filter-class>
      		  com.sun.identity.wssagents.jaxws.client.ClientFilter
      		</filter-class>
 	   </filter>
 	   <filter-mapping>
     		<filter-name>LoginFilter</filter-name>
     		<url-pattern>/*</url-pattern>
       </filter-mapping>

   5.5 Build the secure WARs by running "ant secure-war" from
       <wssagent_unzip_location>/samples/StockService for WSP and
       <wssagent_unzip_location>/samples/StockClient for WSC.
   5.6 Deployment instructions are same as unsecure WAR.
   
%% 6. Configuring WSC and WSP profiles in OpenSSO

By default, this sample will use the default wsc/wsp profiles that OpenSSO 
ships with. If you wish to customize the configuration, you can create new 
WSC/WSP profiles as explained here:

   6.1 Login to OpenSSO as admin, navigate to Access Control > Top Level Realm > 
       Agents > Web Services Client and click the New button. Create a new
       profile whose name is the same as the name of the Service (refer the WSDL
       for Service Name). In the case of this sample, the WSC profile name
       should be StockService. Provide a password and click Create.
   6.2 Back on the Web Service Client page, click on the newly created WSC 
       profile named StockService.
   6.3 Select a preferred Security Mechanism in the Security section. If you 
       select STSSecurity, you will need to select SecurityTokenService for the
       STS Configuration field (right below the Security Mechanism field.)
   6.4 In the Signing and Encryption section, select "Is Request Signed" and 
	   "Is Response Signature Verified."
   6.5 In the End Points section, use the end point URL of your web service as
       the value for the Web Service End Point field. In this case, it would be
	   <protocol>://<hostname>:<port>/StockService/StockService. Save the changes to
	   the profile and click Back to Main Page.
   6.6 In a similar way, create the WSP profile. The name of this profile should 
	   be the same as the End Point URL used for the WSC 
	   (<protocol>://<hostname>:<port>/StockService/StockService).
   6.7 Click on the newly created WSP profile and select a preferred Security 
       Mechanism, in the Security section.
   6.8 In the Signing and Encryption section, select "Is Response Signed" and 
	   "Is Resquest Signature Verified."
   6.9 Use the same End Point URL for WSP also. 
	   For eg. - <protocol>://<hostname>:<port>/StockService/StockService
   6.10 Save the changes and logout of OpenSSO.

%% 7. Testing the samples

   7.1 From your web browser, access <protocol>://<host>:<port>/StockClient
   7.2 With unsecure WARs, you should be directed to the page with a simple
       form to enter the Stock Symbol of your choice. Click Get Quote button.
       The web-service provider should return the stock results. On this page,
       click on the links named Request and Response in the image illustrating
       the communication. You should see the SOAP request and response without
       any security token in the SOAP request/response headers.
   7.3 With the secure WARs, you will be redirected to OpenSSO's Authentication 
       service for end user login. Enter any existing OpenSSO user with the 
       password. Upon successful end user authentication, you will be redirected 
       back to <protocol>://<host>:<port>/StockClient/ page. Click Get Quote for
       a symbol of your choice and by clicking on the Request/Response links on
       the stock quote results page, you can see the security token in the SOAP
       request/response headers.
   7.4 Repeat the steps from 7.2
   
%% 8. Building the samples for Tomcat

   8.1 Web Service WAR

   8.1.1 Because Tomcat is a Web Container (not a Java EE container) and 
         does not support JSR 109 service endpoint, the JAX-WS service WAR 
         deployed in Tomcat needs a special deployment descriptor. This 
         descriptor is the XML file <wssagent_unzip_location>/samples/
         StockService/web/WEB-INF/sun-jaxws.xml. The file describes
         the JAX-WS service endpoint, as shown below:
         
         <endpoints xmlns='http://java.sun.com/xml/ns/jax-ws/ri/runtime'
                    version='2.0'>
			<endpoint name='StockQuote' 
          			  implementation='com.sun.stockquote.StockQuoteImpl' 
                      url-pattern='/StockService'/>  
		 </endpoints>

   8.1.2 Add the following lines to the <wssagent_unzip_location>/samples/
         StockService/web/WEB-INF/web.xml file. If the tags
         already exist, overwrite them.
         
         <listener>  
			<listener-class>  
			  com.sun.xml.ws.transport.http.servlet.WSServletContextListener 
			</listener-class>  
		 </listener>  
		 <servlet>  
			<servlet-name>StockService</servlet-name>  
			<servlet-class>
			   com.sun.xml.ws.transport.http.servlet.WSServlet
			</servlet-class>  
		 </servlet>

   8.1.3 Create the StockService.war file incorporating the above changes and
         deploy using the Tomcat admin console or by copying the files into the 
         <Tomcat_Install_Location>/webapps directory.

   8.2 Web Service Client WAR

   8.2.1 On the client side, you must make changes to the implementation class 
         that invokes the service method(s) so that the client handler, which 
         is used for logging and security, can be invoked. The changes needed 
         are described below. Remember to change the port number in the WSDL 
         URL.
         
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.util.List;
import java.util.ArrayList;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.Service;
import javax.xml.ws.WebServiceRef;
import javax.xml.ws.soap.SOAPFaultException;
import javax.jws.HandlerChain;

public class GetQuote extends HttpServlet {
    
    /*@WebServiceRef(wsdlLocation =
        "http://localhost:8080/StockService/StockService?wsdl")
    @HandlerChain(file="client_handlers.xml")
    private com.sun.stockquote.StockService service;*/
	
	
    /**
     * Get Stock quote from WSP
     */
    public QuoteResponseType getStockQuote(String symbol) throws
           SOAPFaultException {

    	URL wsdlLocation = null; 
    	try { 
    		wsdlLocation = new URL
                       ("http://localhost:8080/StockService/StockService?wsdl");
    		} 
    	catch (Exception e){
    		System.out.println(e.toString()); 
    	} 
    	
    	QName serviceName = new QName
                            ("http://sun.com/stockquote.wsdl", "StockService");
    	Service service = Service.create(wsdlLocation, serviceName); 
    	StockQuote port = service.getPort(StockQuote.class); 
    	
    	BindingProvider bindingProvider = (BindingProvider)port; 
    	List<Handler> handlerChain = new ArrayList<Handler>(); 
    	handlerChain.add
                  (new com.sun.identity.wssagents.jaxws.client.ClientHandler());
    	handlerChain.add(new LogClientHandler()); 
    	bindingProvider.getBinding().setHandlerChain(handlerChain); 
        
        QuoteRequestType body = new QuoteRequestType();
        body.setSymbol(symbol);
        return(port.getStockQuote(body));
    }
     
   8.2.2 Run "ant secure-war" from <wssagent_unzip_location>/samples/StockClient
         and deploy the resulting StockClient.war

%% 9. Preparing JBoss for JAX-WS

   9.1 Download JBossWS, the JBoss Web Services stack (Metro/Apache CXF version 
       3.1.1.GA). The version of JBossWS needed depends on the version of JBoss
       Application Server that you are running.
   9.2 To install the stack downloaded in the previous step, unzip the 
       downloaded file and modify the file ant.properties.example by providing
       the JBOSS_HOME value based on the version of JBoss you are using. All the
       other values can be left to default. Save the file as ant.properties in
       the same location.
   9.3 Run the ant target deploy-jbossxxx where xxx is the version of JBoss. 
       For example, if you are using JBoss 5.0.0.GA, the command would be:
       ant deploy-jboss500
       Refer to the JBoss website for detailed installation instructions.
   
%% 10. Pre-Built WAR Files

The Sample WARs shipped with the WSS Agents Sample assume that the WSP is
deployed to a container running at localhost using port 8080. If your setup 
matches this, you can test the WARs directly, without the need of building 
from scratch.




 


