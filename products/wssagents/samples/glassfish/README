<!--
   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
  
   Copyright (c) 2008 Sun Microsystems Inc. All Rights Reserved
  
   The contents of this file are subject to the terms
   of the Common Development and Distribution License
   (the License). You may not use this file except in
   compliance with the License.

   You can obtain a copy of the License at
   https://opensso.dev.java.net/public/CDDLv1.0.html or
   opensso/legal/CDDLv1.0.txt
   See the License for the specific language governing
   permission and limitations under the License.

   When distributing Covered Code, include this CDDL
   Header Notice in each file and include the License file
   at opensso/legal/CDDLv1.0.txt.
   If applicable, add the following below the CDDL Header,
   with the fields enclosed by brackets [] replaced by
   your own identifying information:
   "Portions Copyrighted [year] [name of copyright owner]"

   $Id: README,v 1.13 2008-12-20 01:30:45 mallas Exp $

-->

README
=======

This README explains the steps for web services security using glassfish
security agents. 

Before you begin:
=================

The web services security for JAX-WS based web services is achieved using
JSR196 providers. Before you begin, follow the README.glassfish from the 
install directory of the zip file. 

General Description: 
====================

The samples provided here are JAX-WS based web service, a web services
client and a standalone client. 
The sample demonstrates a simple stock quote service where given
a stock ticker symbol it obtains stock data. The secure communication
between stock quote web services client is achieved using Federation
OpenSSO web services security agents. The web services security
agents profile configuation is stored in backend repository information
like regular OpenSSO agents.  

Deployment of samples:
======================

To configure for web services security, essentially there are two steps
besides configuring the providers as mentioned above (Before you begin
section).
 

I. Deploy the samples

   The samples here are provided with convenient "ant" build script to
   build and deploy the samples. This sample comes with two directories
   StockQuoteClient and StockService which are for the web services client
   and web service respectively. Also, it has a file name called as 
   glassfish.properties. 

   1. Open glassfish.properties and edit for properties
       glassfish.home = <Glassfish installation directory>
       glassfish.host = <Host where glassfish is installed>
       glasfish.passwordfile = <Password file for the glassfish adminpassword>
       The properties build.class.path and jaxws.endorsed.dir are not
       used for the stock samples, but for advanced samples.
       

   2. Make sure that JAVA_HOME is set to JDK1.5 installation and similarly
      make sure java and javac are in the PATH before executing the samples.

   3. Use the ant command from <ApplicationServer-install>/lib/ant/bin/ant

   4. cd StockService and run "ant -f build.xml". This will build
      and deploy the StockService onto glassfish container.

   5. The StockQuoteClient Sample assumes the web service (StockService)
      is deployed on localhost and port 8080. However, if they are different
      edit and replace localhost and 8080 in the following files: 
      StockQuoteClient/src/java/com/samples/GetQuote.java
      StockQuoteClient/src/java/com/samples/SOAPMessage.java

   6. cd StockQuoteClient and run "ant -f build.xml". This will build
      and deploy the StockQuoteClient onto glassfish container.

   7. cd StockService and run "ant -f build.xml". This will build
      and deploy the StockService onto glassfish container.


II. Configure the web services client for "StockService".

1.  Login into the OpenSSO Console with user amadmin and <amadmin password>

    openssoserver_protocol://openssoserver_host:openssoserver_port/openssoserver_deploy_uri

    Note: If you have logged in as any other user, click Logout on the
    console page and Login again and make sure that you access the OpenSSO
    Console.

    Create agent profiles for "StockService" WSC : 
    The "StockService" is the client profile name. This name should match with
    the service name in the WSDL file. For e.g. if we have CalendarService,
    the name should match with whatever is there in the WSDL.

    Go to Access Control -> Default realm -> Agents ->

        a) Create "WSC" profile for "StockService"
        Select Web Service Client -> under Agent, click "new" -> 
        enter name as "StockService" and other required fields -> Save.
        Click on above saved profile to edit -> Select required Security 
        Mechanism, "Preserve Security Headers in Message" as
        true (checked) and "Is Request Signed" as true (checked).
        Save changes.

        The security mechanism could be "STSSecurity" and what it means is
        that the WSC is requesting STS (WS-Trust) Service to generate the token
        so that it can secure the request to the WSP.

        If the required or selected Security Mechanism is STSSecurity,
        then select STS Configuration as "SecurityTokenService" and 
        Web Service End Point as "default". Ideally, this endpoint
        should match with how the WSP registers with STS preferably
        an endpoint of the Web Service Provider. However, out of the box
        it is just "default" since we dont know the endpoint.

        The following is required to allow the WSC to read it's configuration
        from OpenSSO.
        Add the "StockService" agent profile to the AgentAuthenticator by
        going into AgentAuthenticator->agentAuth->Add the StockService to
        Agent Profiles allowed to Read and save the configuration.
       

        b) Create "WSP" profile (if not already created)
        Select Web Service Provider -> under Agent, 
        click "new" -> enter name as "wsp" and other required fields -> Save.
        Click on above saved profile to edit -> Select all Security Mechanisms.
        Select Web Service End Point as default and 
        "Is Request Signature Verified" as true (checked).
        Save changes.

2.  Logout of OpenSSO Administration console.

III. Run the samples

  a) Web Service Client sample :

    For StockQuoteClient to honor the "User Authentication Required" 
    configuration at wsc ("StockService" agent here), 
    you need to add following configuration at HTTP provider in Glassfish :

    GF admin console - Expand Configuration -> Security -> Click on 
    Message Security -> HttpSevlet -> Providers tab -> click on FAMHttpProvider
    click on "Add Property" -> give name as "providername" and 
    value as "StockService" (since we are using "StockService" agent profile here). 
    Save changes and logout.

    I) With this when "User Authentication Required" flag is checked at 
      "StockService" agent profile, SAML token with end user's identity/token
    will be generated and you can use either SAML 1.1 or SAML 2.0 SenderVouches 
    at "wsp" profile. 
    
    Here, the flow will be as follows :

    1. Access the stock quote client page.

       http://<host>:<port>/StockQuoteClient/index.jsp

    2. You will be redirected to OpenSSO's Authentication service
       for end user login. Enter any existing OpenSSO user with
       its password. Upon successful end user authentication, you will be redirected
       back to http://<host>:<port>/StockQuoteClient/ page.

    3. Enter "JAVA" as stock ticker symbol and click "Get Quote".

    4. If successful, this will display the stock values.

    II) When "User Authentication Required" flag is not checked at 
       "StockService" agent profile, 
    SAML token with WSC's identity (WSC's cert) will be generated and 
    you can use either SAML 1.1 or SAML 2.0 HolderOfKey at "wsp" profile.
 
    Here, the flow will be as follows :

    1. Access the stock quote client page.

       http://<host>:<port>/StockQuoteClient/index.jsp

    2. Enter "JAVA" as stock ticker symbol and click "Get Quote".

    3. If successful, this will display the stock values.

  b) Standalone Client sample :

  The standlone client demonstrates running the plain SOAP based web service
  client that can use the OpenSSO ClientSDK API to secure the web service requests.

    1. Login into the OpenSSO Console with user amadmin and <amadmin password>

    openssoserver_protocol://openssoserver_host:openssoserver_port/openssoserver_deploy_uri

    Note: If you have logged in as any other user, click Logout on the console page and Login
    again and make sure that you access the OpenSSO Console.

      Go to Access Control -> Default realm -> Agents ->

        a) Create "WSP" profile 
        Select Web Service Provider -> under Agent, click "new" -> 
        enter name as "StockServiceWSP" and other required fields -> Save.
        Click on above saved profile to edit -> Select all Security Mechanisms.
        Select Web Service End Point as the actual StockService end point url 
        (default is "http://localhost:8080/StockService/StockService") and 
        "Is Request Signature Verified" as true (checked).
        Save changes.
    
        a) Modify "WSC" profile
        Select Web Service Client -> under Agent, click on "wsc" profile to edit.
        Enter Web Service End Point as the actual StockService end point url 
        (default is "http://localhost:8080/StockService/StockService").
        Save changes.
        Note : If the required or selected Security Mechanism is "STSSecurity",
        then select STS Configuration as "SecurityTokenService".

    2. cd StandAloneStockClient directory

    3. run "ant -f build.xml". 
    This will build and run the Standalone client sample.

