<!--
   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
  
   Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved
  
   The contents of this file are subject to the terms
   of the Common Development and Distribution License
   (the License). You may not use this file except in
   compliance with the License.

   You can obtain a copy of the License at
   https://opensso.dev.java.net/public/CDDLv1.0.html or
   opensso/legal/CDDLv1.0.txt
   See the License for the specific language governing
   permission and limitations under the License.

   When distributing Covered Code, include this CDDL
   Header Notice in each file and include the License file
   at opensso/legal/CDDLv1.0.txt.
   If applicable, add the following below the CDDL Header,
   with the fields enclosed by brackets [] replaced by
   your own identifying information:
   "Portions Copyrighted [year] [name of copyright owner]"

   $Id: README.wssagents-jax-ws-zip,v 1.3 2009-07-27 22:32:36 mrudul_uchil Exp $

-->

I) OpenSSO Web Services Security Agents (based on JAX-WS Handlers) - Zip file

openssowssagents.zip
             |____ lib/openssoclientsdk.jar (complete OpenSSO clientsdk jar)
             |____ lib/openssowssagents.jar (complete WSS Agents jar)
             |____ lib/xmlsec.jar (XML Security library jar)
             |____ config/AMConfig.properties (complete OpenSSO client properties)
             |____ config/client_handlers.xml (JAX-WS Handlers configuration file for Client)
             |____ config/server_handlers.xml (JAX-WS Handlers configuration file for Server)
             |____ resources/keystore.jks (client keystore file)
             |____ resources/.keypass (password file for key)
             |____ resources/.storepass (password file for keystore)
             |____ README (this file)
             |____ license.txt
             |____ samples/* (WSC/WSP samples using WSS Agents)


II) Securing a Web Service With OpenSSO Web Services Security Agents (openssowssagents.zip) :

A) OpenSSO Client and Keystore configuration :
1) copy resources/* to some dir (e.g. @KEYSTORE_LOCATION@ )
2) Update config/AMConfig.properties for the following properties
com.iplanet.services.debug.directory=@DEBUG_DIR@
com.iplanet.am.naming.url=@SERVER_PROTOCOL@://@SERVER_HOST@:@SERVER_PORT@/@DEPLOY_URI@/namingservice
com.iplanet.am.server.protocol=@SERVER_PROTOCOL@
com.iplanet.am.server.host=@SERVER_HOST@
com.iplanet.am.server.port=@SERVER_PORT@
com.iplanet.am.services.deploymentDescriptor=/@DEPLOY_URI@
com.sun.identity.loginurl=@SERVER_PROTOCOL@://@SERVER_HOST@:@SERVER_PORT@/@DEPLOY_URI@/UI/Login
com.sun.identity.saml.xmlsig.keystore=@KEYSTORE_LOCATION@/keystore.jks
com.sun.identity.saml.xmlsig.storepass=@KEYSTORE_LOCATION@/.storepass
com.sun.identity.saml.xmlsig.keypass=@KEYSTORE_LOCATION@/.keypass

B) Web Service Provider application modifications :
1) unwar unsecured Web Service Provider war file
2) copy lib/*.jar files to WEB-INF/lib (create "lib" dir under "WEB-INF" dir, if it does not exist already)
3) copy config/AMConfig.properties to WEB-INF/classes
4) copy config/server_handlers.xml to WEB-INF/classes/../../.. at the .class file level
Note : If Web Service Provider application already contains handlers xml file at this level, then merge
this config/server_handlers.xml file into existing handlers xml file in such a way that
      <handler>
         <handler-name>ServerHandler</handler-name>
         <handler-class>com.sun.identity.wssagents.jaxws.server.ServerHandler</handler-class>
      </handler>
is the first handler in the handler-chain.
5) now war secured Web Service Provider war file and deploy it on your favorite container

C) Web Service Client application modifications :
1) unwar unsecured Web Service Client war file
2) copy lib/*.jar files to WEB-INF/lib (create "lib" dir under "WEB-INF" dir, if it does not exist already)
3) copy config/AMConfig.properties to WEB-INF/classes
4) copy config/client_handlers.xml to WEB-INF/classes/../../.. at the .class file level
Note : If Web Service Client application already contains handlers xml file at this level, then merge
this config/client_handlers.xml file into existing handlers xml file in such a way that
      <handler>
         <handler-name>ClientHandler</handler-name>
         <handler-class>com.sun.identity.wssagents.jaxws.client.ClientHandler</handler-class>
      </handler>
is the first handler in the handler-chain.
5) Add client filter to WEB-INF/web.xml as follows :
 <filter>
     <filter-name>LoginFilter</filter-name>
     <filter-class>com.sun.identity.wssagents.jaxws.client.ClientFilter</filter-class>
 </filter>
 <filter-mapping>
     <filter-name>LoginFilter</filter-name>
     <url-pattern>/*</url-pattern>
 </filter-mapping>
6) now war secured Web Service Client war file and deploy it on your favorite container


III) Configuring profiles for Web Service Client and Web Service Provider

A)  Login into the OpenSSO Console with user amadmin and <amadmin password>

    openssoserver_protocol://openssoserver_host:openssoserver_port/openssoserver_deploy_uri

    Note: If you have logged in as any other user, click Logout on the console page and Login again and
          make sure that you access the OpenSSO Console.

    Create agent profiles for Web Service Client and Web Service Provider
    Note : If you do not create these profiles then out of box created profiles will be used for
           Web Service Client (out of box profile as "wsc") and
           Web Service Provider (out of box profile as "wsp").

      Go to Access Control -> Default realm -> Agents ->

        1) Create "WSC" profile
        Select Web Service Client -> under Agent, click "new" -> 
        Enter name as Service Name (Service Name from the Service WSDL)
        and other required fields and click Save.

        Click on above saved profile to edit ->
        Select required Security Mechanism.
        Check "Is Request Signed" as true.
        Enter "Web Service End Point" as your Web Service End Point URL.
        Save changes.

        Note : If the required or selected Security Mechanism is "STSSecurity", then
               select STS Configuration as "SecurityTokenService".

        2) Create "WSP" profile
        Select Web Service Provider -> under Agent, click "new" ->
        Enter name as your Web Service End Point URL
        and other required fields and click Save.

        Click on above saved profile to edit ->
        Select all Security Mechanisms.
        Check "Is Request Signature Verified" as true.
        Enter "Web Service End Point" as your Web Service End Point URL.
        Save changes.

        3) Update "Agent Authenticator" profile
        Select Agent Authenticator -> under Agent, click on "agentAuth" ->
        Under "Agent Profiles allowed to Read",
        Select newly created agent profiles for WSC and WSP (in above steps 1 and 2)
        from "Available" list in order to add them to be in "Selected" list.
        Save changes.

B)  Logout of OpenSSO Administration console.


IV) Samples for testing

    Follow samples/README file to test Web Service Client and Web Service Provider
    samples applications with securing Web Service request / response between them
    using OpenSSO WSS agents.
