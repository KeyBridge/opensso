/* The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://opensso.dev.java.net/public/CDDLv1.0.html or
 * opensso/legal/CDDLv1.0.txt
 * See the License for the specific language governing
 * permission and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL
 * Header Notice in each file and include the License file
 * at opensso/legal/CDDLv1.0.txt.
 * If applicable, add the following below the CDDL Header,
 * with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * $Id: Condition.java,v 1.1 2006-04-26 05:14:23 dillidorai Exp $
 *
 * Copyright 2006 Sun Microsystems Inc. All Rights Reserved
 */



package com.sun.identity.policy.interfaces;

import com.sun.identity.policy.ConditionDecision;
import com.sun.identity.policy.PolicyException;
import com.sun.identity.policy.Syntax;
import com.iplanet.sso.SSOToken;
import com.iplanet.sso.SSOException;

import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

/**
 * The class <code>Condition</code> defines an interface 
 * to allow pluggable condition. These are used to control 
 * policy decisions based on parameters such as time,
 * authentication level of the user session and IP address from which
 * the user is making the request.
 *
 * A condition computes a <code>ConditionDecision</code> based on the state
 * of condition object as  set by <code>setProperties</code> 
 * method call and the environment passed in a map of key/value pairs. 
 *
 * <code>ConditionDecision</code> encapsulates  whether a <code>Policy</code> 
 * applies for the request and <code>Advice</code> messages  generated by 
 * the condition.
 *
 * The following Condition implementation are provided with the 
 * Policy framework:
 * <ul>
 * <li>AuthLevelCondition</li>
 * <li>LEAuthLevelCondition</li>
 * <li>AuthSchemeCondition</li>
 * <li>IPCondition</li>
 * <li>SimpleTimeCondition</li>
 * <li>SessionCondition</li>
 * <li>SessionPropertyCondition</li>
 * <li>AuthenticateToRealmCondition</li>
 * <li>AuthenticateToServiceCondition</li>
 * </ul>
 *
 * All condition implementations should have a public no argument 
 * constructor.
 *
 * @see com.sun.identity.policy.ConditionDecision
 * @supported.all.api
 */
public interface Condition extends Cloneable {

    /**
     * Returns a list of property names for the condition.
     *
     * @return list of property names
     */
    public List getPropertyNames();

    /**
     * Returns the syntax for a property name
     * @see com.sun.identity.policy.Syntax
     *
     * @param property property name
     *
     * @return <code>Syntax<code> for the property name
     */
    public Syntax getPropertySyntax(String property);


    /**
     * Gets the display name for the property name.
     * The <code>locale</code> variable could be used by the plugin to
     * customize the display name for the given locale.
     * The <code>locale</code> variable could be <code>null</code>, in which
     * case the plugin must use the default locale.
     *
     * @param property property name
     * @param locale locale for which the property name must be customized
     * @return display name for the property name.
     * @throws PolicyException
     */
    public String getDisplayName(String property, Locale locale)
        throws PolicyException;

    /**
     * Returns a set of valid values given the property name. This method
     * is called if the property Syntax is either the SINGLE_CHOICE or
     * MULTIPLE_CHOICE.
     *
     * @param property property name
     * @return Set of valid values for the property.
     * @exception PolicyException if unable to get the Syntax.
     */
    public Set getValidValues(String property) throws PolicyException;

    /** Sets the properties of the condition.  
     *  This influences the <code>ConditionDecision</code> that would be
     *  computed by a call to method <code>getConditionDecision(Map)</code> and
     *  the <code>Advice</code> messages generated included in the
     *  <code>ConditionDecision</code>.
     *
     *  <code>ConditionDecision</code> encapsulates whether a policy applies for
     *  the request and advice messages generated by the condition.
     *
     *  For example, for a <code>SimpleTimeCondition</code>, the properties 
     *  would  define <code>StartTime</code> and <code>EndTime</code>, to define
     *  the time range during which the policy applies 
     *
     *  @param properties the properties of the condition 
     *         that would influence the <code>ConditionDecision</code> returned
     *         by a call to method <code>getConditionDecision(Map)</code>.
     *         Keys of the properties have to be String.
     *         Value corresponding to each key have to be a <code>Set</code> of 
     *         <code>String</code> elements. Each implementation of Condition 
     *         could add further  restrictions on the keys and values of this 
     *         <code>Map</code>.
     *  @throws PolicyException for any abnormal condition
     * @see com.sun.identity.policy.ConditionDecision
     */
    public void setProperties(Map properties) throws PolicyException;

    /** Gets the properties of the condition
     *  @return properties of the condition
     *  @see #setProperties
     */
    public Map getProperties();

    /**
     * Gets the decision computed by this condition object, based on the 
     * <code>Map</code> of environment parameters 
     *
     * @param token single-sign-on <code>SSOToken</code> of the user
     *
     * @param env request specific environment <code>Map,/code> of key/value 
     *        pairs For example this would contain IP address of remote
     *        client for an <code>IPCondition</code>.
     *
     * @return the condition decision.
     *         The condition decision encapsulates whether a <code>Policy</code>
     *         applies for the request and  <code>advice</code> messages
     *         generated by the condition.
     *
     * Policy framework continues evaluating a  <code>Policy</code> only if it 
     * applies to the request  as indicated by the 
     * <code>ConditionDecision</code>.
     * Otherwise, further evaluation  of the <code>Policy</code> is skipped. 
     * However, the <code>Advice</code>  messages encapsulated  in the 
     * <code>ConditionDecision</code> are aggregated and passed up, 
     * encapsulated in  the <code>PolicyDecision</code>.
     *
     *
     * @throws PolicyException if the decision could not be computed
     * @throws SSOException if SSO token is not valid
     *
     * @see com.sun.identity.policy.ConditionDecision
     */
    public ConditionDecision getConditionDecision(SSOToken token, Map env) 
            throws PolicyException, SSOException;

    /**
     * Returns a copy of this object.
     *
     * @return a copy of this object
     */
    public Object clone();

}
