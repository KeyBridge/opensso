------------------------------------------------------------------------------
README file for Open Web Single Sign-On
------------------------------------------------------------------------------
The contents of this file are subject to the terms
of the Common Development and Distribution License
(the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at
https://opensso.dev.java.net/public/CDDLv1.0.html or
opensso/legal/CDDLv1.0.txt
See the License for the specific language governing
permission and limitations under the License.

When distributing Covered Code, include this CDDL
Header Notice in each file and include the License file
at opensso/legal/CDDLv1.0.txt.
If applicable, add the following below the CDDL Header,
with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

$Id: README,v 1.4 2006-12-08 21:02:11 veiming Exp $

Copyright 2006 Sun Microsystems Inc. All Rights Reserved
------------------------------------------------------------------------------

%% Contents:
    %% 1. Build requirements
    %% 2. Library dependencies
        %% 2.1 Obtaining j2ee.jar and mail.jar
        %% 2.2 Obtaining jaxb-api.jar, jaxb-impl.jar, jaxb-libs.jar, 
               jaxb-xjc.jar, jaxrpc-impl.jar, jaxrpc-spi.jar, jaxrpc-api.jar, 
               activation.jar, saaj-api.jar, saaj-impl.jar, relaxngDatatype.jar,
               xmlsec.jar, xsdlib.jar, FastInfoset.jar, jsr173_api.jar
        %% 2.3 Obtaining ldapjdk.jar
        %% 2.4 Obtaining db.jar
        %% 2.5 Obtaining testng-5.1-jdk15.jar
    %% 3. Building the workspace
        %% 3.1 build target
        %% 3.2 doc target
        %% 3.3 clean target
        %% 3.4 demo target
        %% 3.5 demo-clean target
        %% 3.6 war target
        %% 3.7 war-clean target
        %% 3.8 usage target
    %% 4. Building the demo

%% 1. Build requirements

The OpenSSO workspace uses Apache Ant as the build tool. The build scripts
in this workspace use features not present in releases of Ant prior to 1.6.
Thus, in order to build this workspace you must have Ant version 1.6.5 or above
installed and available in your system path.

The sources in this workspace should be compiled using JDK 5.0 with the source
and target levels set to "1.4". In order to allow this, you must ensure that
JDK 5.0 is present in your system path and the JAVA_HOME environment variable
is setup correctly pointing to its location.

%% 2. Library dependencies

The OpenSSO sources depend upon a few third-party libraries that are not
included as a part of the workspace and must be obtained directly from 
the library vendor or distributor. Some of these libraries are available in 
source distribution form and must be built locally before they can be used. 
The libraries needed for compiling OpenSSO sources are:

   - Java EE 5 SDK: j2ee.jar, mail.jar
   - JWSDP version 1.6: jaxb-api.jar, jaxb-impl.jar, jaxb-libs.jar, 
     jaxb-xjc.jar, jaxrpc-impl.jar, jaxrpc-spi.jar, jaxrpc-api.jar, 
     activation.jar, saaj-api.jar, saaj-impl.jar, relaxngDatatype.jar,
     xmlsec.jar, xsdlib.jar, FastInfoset.jar, jsr173_api.jar
   - Mozilla LDAP JDK version 4.17: ldapjdk.jar
   - SleepyCat Berkeley DB version 4.2.52: db.jar 
   - TestNG version 5.1 : testng-5.1-jdk15.jar

Once these libraries are available, they should be placed under the extlib
directory of the workspace. Any library placed in this directory is 
automatically included in the classpath during the compilation phase of
the build process.

The following subsections briefly describe how these libraries may be 
obtained. These instructions are provided for your convenience only and
are not intended to replace or invalidate the procedures/guidelines set
by the library vendor or distributor for obtaining those libraries. Before
you follow these instructions, you must agree to abide by any terms and
conditions set forth by the library vendor or distributor. In case any of
these instructions are in contradiction to such terms or conditions, you 
must disregard those instructions and instead follow the ones provided by
the library vendor or distributor in accordance with their terms and 
conditions.

%% 2.1 Obtaining j2ee.jar and mail.jar

The j2ee.jar and mail.jar library can be obtained from Java EE 5 SDK.
Follow these steps to obtain the J2EE SDK:

2.1.1 Open the web page: http://java.sun.com/javaee/downloads/index.jsp
2.1.2 Depending on your choice of platform, you may choose to download any
      one of the three distribution types available under Java EE 5 SDK
      Update 1.
2.1.3 Extract or extract and install the downloaded file as necessary to
      have the SDK available on your system.

Once the J2EE SDK is installed, you can get the javaee.jar and mail.jar from 
the lib directory of this SDK. You must rename javaee.jar to j2ee.jar when 
copying it to the extlib directory.
 

%% 2.2 Obtaining jaxb-api.jar, jaxb-impl.jar, jaxb-libs.jar, 
       jaxb-xjc.jar, jaxrpc-impl.jar, jaxrpc-spi.jar, jaxrpc-api.jar, 
       activation.jar, saaj-api.jar, saaj-impl.jar, relaxngDatatype.jar,
       xmlsec.jar, xsdlib.jar, FastInfoset.jar, jsr173_api.jar

The libraries jaxb-api.jar, jaxb-impl.jar, jaxb-libs.jar, jaxb-xjc.jar, 
jaxrpc-impl.jar, jaxrpc-spi.jar, jaxrpc-api.jar, activation.jar, saaj-api.jar, 
saaj-impl.jar, relaxngDatatype.jar, xmlsec.jar, xsdlib.jar, FastInfoset.jar, 
jsr173_api.jar can be obtained from the JWSDP version 1.6 distribution.

Follow these steps to obtain JWSDK 1.6:

2.2.1 Visit URL, http://java.sun.com/webservices/archive.html
      and click on "Java Web Services Developer Pack 1.6" hyperlink
2.2.2 Click on the Download button under "Java Web Services Developer Pack v1.6"
      section header
2.2.3 If you are not already logged into Sun Developer Network, you may have
      to authenticate using your Sun Developer Network username and password.
      If you do not have a Sun Developer Network account, you must create one
      by clicking on the Register Now link available on this page. 
2.2.4 Once you have logged in, you will see the download page for Java Web
      Services Developer Pack 1.6. Review the license agreement and select
      the Accept choice to proceed.
2.2 5 Depending on your choice of platform, you may choose to download any
      one of the two distribution types available.
2.2.6 Install the downloaded file in order to have the JWSDP available on
      your system.

Once the JWSDP distribution is installed on your system, copy jars from
corresponding directories:
    - jaxb-api.jar        : <jwsdp-install-dir>/jaxb/lib
    - jaxb-impl.jar       : <jwsdp-install-dir>/jaxb/lib
    - jaxb-libs.jar       : <jwsdp-install-dir>/jaxb/lib
    - jaxb-xjc.jar        : <jwsdp-install-dir>/jaxb/lib
    - jaxrpc-impl.jar     : <jwsdp-install-dir>/jaxrpc/lib
    - jaxrpc-spi.jar      : <jwsdp-install-dir>/jaxrpc/lib 
    - jaxrpc-api.jar      : <jwsdp-install-dir>/jaxrpc/lib 
    - activation.jar      : <jwsdp-install-dir>/jwsdp-shared/lib
    - relaxngDatatype.jar : <jwsdp-install-dir>/jwsdp-shared/lib
    - xmlsec.jar          : <jwsdp-install-dir>/jwsdp-shared/lib 
    - xsdlib.jar          : <jwsdp-install-dir>/jwsdp-shared/lib
    - saaj-api.jar        : <jwsdp-install-dir>/saaj/lib
    - saaj-impl.jar       : <jwsdp-install-dir>/saaj/lib
    - FastInfoset.jar     : <jwsdp-install-dir>/fastinfoset/lib
    - jsr173_api.jar      : <jwsdp-install-dir>/sjsxp/lib

%% 2.3 Obtaining ldapjdk.jar

The ldapjdk.jar library is not distributed in the binary form. However, this
library can be built using the source distribution provided by Mozilla 
project. Follow these steps to obtain ldapjdk 4.17:

2.3.1 Open the web page: http://www.mozilla.org/directory/javasdk.html
2.3.2 Download the the source distribution based on your preference of
      using zip or tar-gzip formats. 
2.3.3 Extract the source distribution in a convenient location.
2.3.4 The complete build instructions are provided at:
      http://www.mozilla.org/directory/buildjsdk-4.0.txt
      A copy of these instructions is also present under the directory
      mozilla/directory in a file called buildjsdk.txt.  Follow these 
      instructions based on your platform to build the ldap sources. Note 
      that in case you are using JDK 5.0 for compilation, you will have to 
      modify the make-files to add a -source 1.3 to the compiler definition 
      in order to ensure that the build does not break due to the use of 
      newly introduced keywords in JDK 1.4 and JDK 5.0 releases such as enum
      and assert. The rest of the instructions in this section describe how 
      this distribution can be built on a unix platform.
2.3.5 Change into the directory mozilla/directory/java-sdk.
2.3.6 If you are using JDK 5.0 for compilation, open the ldap.mk file and
      modify the JAVAC variable definition to include the -source 1.3 option
      as follows:
          JAVAC=$(JDKBIN)javac -O -classpath "$(JAVACLASSPATH)" -source 1.3
      Since this variable is defined in three places, you will have to
      change all three to ensure that all build paths are covered.
      Also, set MOZ_SRC environment variable to "<install_dir>/mozilla".
2.3.7 Compile the sources using the following command:
          gmake -f ldap.mk JAVA_VERSION=1.4
      You should replace the JAVA_VERSION to the appropriate value as 
      applicable to your environment.
2.3.8 Package the compiled sources into a jar using the command:
          gmake -f ldap.mk JAVA_VERSION=1.4 basepackage
      You should replace the JAVA_VERSION to the appropriate value as 
      applicable to your environment.

Once this process is complete, the ldapjdk.jar library can be obtained from
the directory mozilla/directory/java-sdk/dist/packages.

%% 2.4 Obtaining db.jar

The Sleepycat library db.jar is not distributed in the binary form. However,
this can be built using the source distribution provided by Sleepycat 
Software. Follow these steps to obtain the db.jar library:

2.4.1 Open the web page: http://www.oracle.com/technology/software/products/berkeley-db/db/index.html 
2.4.2 Under "4.x Releases", click "Berkeley DB 4.2.52 NC.tar.gz" link under 
      4.2.52, this will download the source distribution of Berkeley DB.
2.4.3 Extract the sources in a convenient location. 
2.4.4 To build the entire distribution follow the instructions provided in
      the docs/index.html by opening that file in a browser and clicking 
      on the appropriate link under "Building Berkeley DB" section as 
      applicable for your platform. The rest of the instructions in this 
      section describe how this distribution can be built on a unix platform.
2.4.5 Enter the directory db-4.2.52.NC/build_unix and issue the command:
          ../dist/configure --enable-java
      for this command to work, you will need a C compiler along with
      development utilities like gmake, autoconf and libtool available on
      your on your system.
2.4.6 Once this command completes successfully, issue the following command
      to compile the source distribution:
          gmake
      Note that you do not have to install the distribution for obtaining
      the desired library.

Once this process is complete, the db.jar library can be obtained from 
under the db-4.2.52.NC/build_unix directory.

%% 2.5 Obtaining testng-5.1-jdk15.jar

Download testng-5.1.zip from http://testng.org/testng-5.1.zip; unzip it and 
testng-5.1-jdk15.jar in the base directory.

%% 3. Building the workspace

The workspace build system offers many build targets. You can view the
available targets by issuing the ant command from the root of the
workspace. The default target that is executed is the usage target which
displays a brief description about the other targets. Currently the main
targets available in the workspace are:
   
     - build      : compiles the sources
     - doc        : creates javadocs
     - clean      : deletes the generated files
     - demo       : builds the demo application
     - demo-clean : deletes generated demo files
     - war        : builds the WAR
     - war-clean  : deletes generated WAR
     - usage      : displays this usage message

%% 3.1 build target

The build target involves the following processing:

3.1.1 Creation of build output directories such as 
        <workspace-root>/built
        <workspace-root>/built/classes
        <workspace-root>/built/resources
        <workspace-root>/built/docs
        <workspace-root>/built/docs/api

3.1.2 Compiles all the classes present in the source directory to the
      built/classes directory. The compilation debug flag is set to
      "-g:none" but can be changed by defining the following two properties
      in your user level property file $HOME/.opensso:
      
      - build.debug: allowed values are on and off. Example: build.debug=on

      - build.debuglevel: one or more of lines, vars, source as a comma
          separated list. Example: build.debuglevel=lines,source

3.1.3 Transfers the resource and xml files from the resources and xml 
      directories to the built area under the built/resources directory.
      The two exceptions are:

      - the file sms.dtd is copied over to the classes directory under
        the package com/sun/identity/sm as per its defined location for
        reference by other xml files.

      - the properties files Services.properties, DSConfig.properties,
        ums.properties, sso.properties, SMS.properties and 
        authentication_util.properties are combined into a single
        properties file called amSDK.properties.

      The xml files are tag-swapped to change the XML_ENCODING tag with
      the value ISO-8859-1.

%% 3.2 doc target

The doc target involves the following processing:

3.2.1 Creation of build output directories such as 
        <workspace-root>/built
        <workspace-root>/built/classes
        <workspace-root>/built/resources
        <workspace-root>/built/docs
        <workspace-root>/built/docs/api

3.2.2 Executes the javadoc tool with output directory set to built/docs/api
      and includes the following packages:
        com/iplanet/sso/**
        com/iplanet/dpro/**
        com/sun/identity/session/**

      The "**" indicate all sub-packages underneath the current package.

%% 3.3 clean target

The clean target removes all the build output directories.

%% 3.4 demo target

The demo target first invokes the build target and then delegates the
further processing to the build.xml file present under the demo directory.
This target cannot be executed directly unless certain configuration tasks
are performed as described in the file demo/README. Please refer to this file
for further details on the configuration tasks needed prior to building the
demo.

%% 3.5 demo-clean target

Issues a clean to the build.xml file present under the demo directory. This
target is useful in case you are interested in rebuilding the demo without
rebuilding the entire OpenSSO distribution. By issuing the demo-clean target
the build output area for the OpenSSO distribution is not changed and only
the demo related build output area is cleaned.

%% 3.6 war target

The war target first invokes the build target and then delegates the
further processing to the build.xml file present under the war directory.
A deployable WAR file will be created under amserver/built/war/dist directory
after this target is successful executed.

%% 3.7 war-clean target

Issues a clean to the build.xml file present under the war directory. This
target is useful in case you are interested in rebuilding the war without
rebuilding the entire OpenSSO distribution. By issuing the war-clean target
the build output area for the OpenSSO distribution is not changed and only
the war related build output area is cleaned.

%% 3.8 usage target

Displays a list of available targets along with a brief description of
each available target for quick reference.

%% 4. Building the demo

Before building the demo, please follow any instructions described in the
file demo/README. This file also describes the necessary background 
information regarding the demo and the details of how it works.
