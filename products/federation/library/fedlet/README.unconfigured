------------------------------------------------------------------------------
README file for Open Federation Library
------------------------------------------------------------------------------
The contents of this file are subject to the terms
of the Common Development and Distribution License
(the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at
https://opensso.dev.java.net/public/CDDLv1.0.html or
opensso/legal/CDDLv1.0.txt
See the License for the specific language governing
permission and limitations under the License.

When distributing Covered Code, include this CDDL
Header Notice in each file and include the License file
at opensso/legal/CDDLv1.0.txt.
If applicable, add the following below the CDDL Header,
with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

$Id: README.unconfigured,v 1.1 2008-04-17 00:34:45 qcheng Exp $

Copyright 2008 Sun Microsystems Inc. All Rights Reserved


%% Contents:
    %% 1. Contents of this directory 
    %% 2. How to configure and test Fedlet 
    %% 3. How to embed Fedlet into existing application
    %% 4. How to integrate with existing application after Single Sign-on 


%% 1. Contents of this directory 
   This README file provides information on Fedlet ZIP file without 
   pre-configured IDP and Fedlet (SP) metadata.
   Manual steps (refer to section 2.1) need to setup Fedlet (SP) to work 
   with remote IDP.

   Fedlet.zip 
     |
     |- fedlet.war        Fedlet WAR file. This is a ready-to-deploy WAR 
     |                    to show the Fedlet features.
     |
     |- conf              Directory containing Fedlet metadata template,
     |                    COT template and configuration files. 
     |
     |- README            This README file. The file shows how to use the
                          conf files to setup Fedlet configuration. 


%% 2. How to configure and test Fedlet 
     The fedlet.war contains all necessary bits for Fedlet to acting as a 
     light-weighted SAMLv2 Service provider. Since this fedlet.war does
     not contain pre-configured metadata and COT information, you need
     to follow section 3 to setup Fedlet metadata and COT configuration
     before using the fedlet.war for demo.

   2.1 Steps to configure Fedlet     
     a) Extract the Fedlet-unconfigued.zip to a temporal directory.
     b) Goto "conf" directory, and swap following tags in sp.xml-template,
        sp-extended.xml-template, idp-extended.xml-template and
        fedlet.cot-template:
            FEDLET_ENTITY_ID  : replace with the real entity id (name) for
                                your Fedlet (SP). e.g. "fedletsp".
            FEDLET_PROTOCOL   : replace with the protocol of the web container
                                the fedlet.war will be deployed, e.g. "http".
            FEDLET_HOST       : replace with the host name of the web container
                                the fedlet.war will be deployed, e.g. 
                                "www.samples.com".
            FEDLET_PORT       : replace with port number of the web container
                                the fedlet.war will be deployed, e.g. "80".
            FEDLET_DEPLOY_URI : replace with deployment URI of the web container
                                the fedlet.war will be deployed, e.g. "fedlet".
            IDP_ENTITY_ID     : replace with the real entity id (name) for
                                your remote IDP. e.g. "myidp".
         note : If Fedlet and/or IDP entity ID contain "%" or ",", you need to
                escape them before replacing those in fedlet.cot-template.
                Change "%" to "%25" and "," to "%2C".
     c) Create your fedlet home directory. The "fedlet" subdirectory under 
        the web container running user's home (pointed by JVM property 
        "user.home") is the default location for Fedlet to read its metadata, 
        COT and configuration properties. For example, assume running user's 
        home directory is "/home/webservd":
          % mkdir /home/webservd/fedlet
        To change this default directory, set the value of a JVM property 
        "com.sun.identity.fedlet.home" to the desired location when starting 
        your web container.  For example:
             -Dcom.sun.identity.fedlet.home=/export/fedlet/conf
        this will tell Fedlet to read metadata/COT/configuration files from
        "/export/fedlet/conf" directory instead.
     d) Copy tag swapped configuration files (done in step b) to the fedlet 
        home directory.
        Rename "sp-extended.xml-template" to "sp-extended.xml", 
        "sp.xml-template" to "sp.xml", "idp-extended.xml-template" to 
        "idp-extended.xml", "fedlet.cot-template to" "fedlet.cot". 
        Also copy FederationConfig.properties under "conf" to the fedlet 
        home directory.
     e) Get your IDP standard metadata XML file and copy to the fedlet home 
        directory, the XML file must be named as "idp.xml".
     f) Give the Fedlet metadata XML file "sp.xml" to your IDP, the metadata
        file must be imported to IDP machine and add it to the same COT as 
        the IDP entity.
     The configuration is done, you could continue to section 2.2 to deploy
     fedlet.war and test your Fedlet setup.

   2.2 Test your Fedlet setup
     After deploying fedlet.war into your web container, try access the 
     Fedlet(SP) index.jsp page to start Fedlet setup, e.g.
         <SP_PROTOCOL>://<SP_HOST>:<SP_PORT>/<SP_DEPLOY_URI>/index.jsp

     If you have not performed steps described in section 2.1, it will show 
     that the Fedlet home directory is not configured, you need to follow 
     README to create the configuration manually. 
     If Fedlet configuration is done, you will be shown links to start 
     Fedlet (SP) and IDP initiated Single Sing-on. Click the link, you will 
     be redirected to IDP for login, then Single Sign-on to Fedlet(SP). 
     Upon successful completion, a Fedlet(SP) side JSP will be presented 
     to show the SSO Response, Assertion and AttributeStatement if any.

     
%% 3. How to embed Fedlet into your existing application WAR
  a) Extract the fedlet.war into a temporal directory. 
  b) Follow section 2.1 to setup your Fedlet configuration. 
  c) Copy all other files to your application WAR staging directory, overlay 
     them with your existing application WAR structure.
     Optionally you could remove index.jsp and "conf" directory from the 
     temporal directory created in step a) before copying. 
  d) Create the application WAR and redeploy in your web container. 


%% 4. How to integrate with existing application after Single Sign-on
     After Fedlet completes SAMLv2 Single Sign-on, it will set the SAMLv2 
     Response XML as value for attribute "SAMLResponse" and forward to
     saml2/jsp/fedletDefault.jsp if no RelayState is specified. 
     There are two ways you could integrate with your application after
     Single Sign-on:
     a) Customize saml2/jsp/fedletDefault.jsp to perform your business
        specific logics. Right now, fedletDefault.jsp just display the
        content of the Response/Assertion/Statements.
     b) Modify the extended metadata of the Service Provider, set the
        value of "intermediateUrl" attribute to a customer URL which resides
        in the same web application and performs your business specific logics. 
        For example:
           <Attribute name="intermediateUrl">
               <Value>/application/processing.jsp</Value>
           </Attribute>
        The Service Provider side assertion consumer service will forward
        request to the configured URL with the SAMLv2 Response XML as value 
        for attribute "SAMLResponse". The Response object could be obtained 
        using following code in your processing servlet/jsp:
          // Get the Response XML string
          String respXML = (String)
              request.getAttribute(SAML2Constants.SAML_RESPONSE);
          if ((respXML != null) && (respXML.length() != 0)) {
              // obtain the Response object
              Response samlResp = ProtocolFactory.getInstance().createResponse(
                  new String(Base64.decode(respXML)));
          }
        After obtaining the Response object, you could navigate through the
        object to get Assertion, Authentication Statements, Attribute Statements
        object (refer to saml2/jsp/fedletDefault.jsp for more details). 
        You could add your own business logics, such as creating your 
        application session, setting attributes, making authorization check etc.

