#!/bin/sh

# The contents of this file are subject to the terms
# of the Common Development and Distribution License
# (the License). You may not use this file except in
# compliance with the License.
#
# You can obtain a copy of the License at
# https://opensso.dev.java.net/public/CDDLv1.0.html or
# opensso/legal/CDDLv1.0.txt
# See the License for the specific language governing
# permission and limitations under the License.
#
# When distributing Covered Code, include this CDDL
# Header Notice in each file and include the License file
# at opensso/legal/CDDLv1.0.txt.
# If applicable, add the following below the CDDL Header,
# with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# $Id
#
# Copyright 2006 Sun Microsystems Inc. All Rights Reserved

BINARY_DIR=`pwd`/..
DEBUG_DIR_PREFIX=${RUNTIME_DIR}/debug
export DEBUG_DIR_PREFIX
CLASSPATH=${RUNTIME_DIR}/config:${BINARY_DIR}/war/WEB-INF/classes:${BINARY_DIR}/war/WEB-INF/lib/opensso.jar:${BINARY_DIR}/war/WEB-INF/lib/xercesImpl.jar:${BINARY_DIR}/war/WEB-INF/lib/sax.jar:${BINARY_DIR}/war/WEB-INF/lib/dom.jar
export CLASSPATH
IS_SILENT_INSTALL_FILE=samplesilent.properties 
export IS_SILENT_INSTALL_FILE
. ./amutils 

##############################################################
#
# Function - Cleanup before exiting script
#
cleanup() {
  delete_password_files
  exit $1
}

##############################################################
#
# Function - create amamdin user
#
create_amadmin_user() {
    # hash password & saved for amadmin
    FLAT_FILE_USER_DIR=${RUNTIME_DIR}/users
    mkdir -p ${FLAT_FILE_USER_DIR} > /dev/null 2>&1
    echo "password=${HASHADMINPASSWD}" > ${FLAT_FILE_USER_DIR}/amadmin.properties
    chmod 500 ${FLAT_FILE_USER_DIR}/amadmin.properties
}

##############################################################
#
# Tag swap of all the service Schema XML files and also the 
# AMConfig.properties file
#
config_tag_swap() {
    copy_files
    #
    # determine fc urls necessary.  if port is default port, then add another 
    # rule that does not include the port
    #
    FCURLS="<Val>$SERVER_PROTOCOL://$SERVER_HOST:$SERVER_PORT</Val>"
    if [ "$SERVER_PORT" = "80" ] && [ "$SERVER_PROTOCOL" = "http" ]; then
    	FCURLS="$FCURLS<Val>$SERVER_PROTOCOL://$SERVER_HOST</Val>"
    elif [ "$SERVER_PORT" = "443" ] && [ "$SERVER_PROTOCOL" = "https" ]; then
    	FCURLS="$FCURLS<Val>$SERVER_PROTOCOL://$SERVER_HOST</Val>"
    fi
    
    GROUP_TYPE="dynamic"
    # CHECK - For existence of ${JAVA_HOME}/bin/java 
    if [ ! -f ${JAVA_HOME}/bin/java ]; then
        eval $ECHO "`$gettext 'Java not found at ${JAVA_HOME}/bin/java'`"
        cleanup 2
    fi
    ORG_BASE=$ROOT_SUFFIX
    SERV_LIST=$SERVER_PROTOCOL://$SERVER_HOST:$SERVER_PORT
    server_url=$SERVER_PROTOCOL://$SERVER_HOST:$SERVER_PORT
    WSVR_INSTANCE="https-${SERVER_HOST}"
    PROFILE_HOST=$SERVER_HOST
    PROFILE_PORT=$SERVER_PORT
    session_url=%protocol://%host:%port
    profileservice_url=$SERVER_PROTOCOL://$PROFILE_HOST:$PROFILE_PORT
    loggingservice_url=$SERVER_PROTOCOL://$PROFILE_HOST:$PROFILE_PORT
    serverservice_url=$SERVER_PROTOCOL://$SERVER_HOST:$SERVER_PORT
    SAMLSITEID=`${JAVA_HOME}/bin/java -classpath ${CLASSPATH} com.sun.identity.saml.common.SAMLSiteID ${SERV_LIST}`
    HASHADMINPASSWD=`${JAVA_HOME}/bin/java -classpath ${CLASSPATH} com.iplanet.services.util.Hash -f ${FILE_ADMINPASSWD}`
    HASHLDAPUSERPASSWD=`${JAVA_HOME}/bin/java -classpath ${CLASSPATH} com.iplanet.services.util.Hash -f ${FILE_AMLDAPUSERPASSWD}`

    create_amadmin_user

    if [ "x$PAM_SERVICE_NAME" = "x" ]; then
      if [ "$OSTYPE" = "Linux" ]; then
        PAM_SERVICE_NAME="password"
      else
        PAM_SERVICE_NAME="other"
      fi
    fi

    if [ -f ${FILE_ADMINPASSWD} ]; then
        ENCADMINPASSWD=`${JAVA_HOME}/bin/java -classpath ${CLASSPATH} com.iplanet.services.util.internal.TextCrypt -f ${FILE_ADMINPASSWD}`
    fi
    if [ $? -ne 0 ]; then
        eval $ECHO "`$gettext 'Error occured while creating encrypted password'`"
       	cleanup 1
    fi 
    if [ -f ${FILE_AMLDAPUSERPASSWD} ]; then
        ENCLDAPUSERPASSWD=`${JAVA_HOME}/bin/java -classpath ${CLASSPATH} com.iplanet.services.util.internal.TextCrypt -f ${FILE_AMLDAPUSERPASSWD}`
    fi
    if [ -f ${FILE_CONFIG_ADMINPASSWD} ]; then
        ENCADADMINPASSWD=`${JAVA_HOME}/bin/java -classpath ${CLASSPATH} com.iplanet.services.util.internal.TextCrypt -f ${FILE_CONFIG_ADMINPASSWD}`
    fi

    UMS_XML=${RUNTIME_DIR}/xml/ums.xml

    DEFAULTORG=$ORG_ROOT_SUFFIX
    NormalizeDNandReplaceComma "$ROOT_SUFFIX" "^"
    if [ "$OSTYPE" = "Linux" ]; then
        replaceCharacter "$NMDN" "&" "\\\&amp;"
    else
        replaceCharacter "$NMDN" "&" "\&amp;"
    fi
    ROOT_SUFFIX_HAT=$NEWSTR

    NormalizeDNandReplaceComma "$ROOT_SUFFIX" "_"
    NM_ROOT_SUFFIX="$NMDN"
    NormalizeDNandReplaceComma "$DEFAULTORG" "_"
    NM_INST_ORGANIZATION="$NMDN"
    NM_ORG_ROOT_SUFFIX="$NMDN"
    VERSION="7 2006Q3 MAIN (Thu Feb  9 11:49:12 2006) SunOS"

if [ "$OSTYPE" = "Linux" ]; then
    replaceCharacter "$ROOT_SUFFIX" "&" "\\\&amp;"
    replaceCharacter "$NEWSTR" "'" "\\\&apos;"
    replaceCharacter "$NEWSTR" '"' "\\\&quot;"
    replaceCharacter "$NEWSTR" "<" "\\\&lt;"
    replaceCharacter "$NEWSTR" ">" "\\\&gt;"
else
    replaceCharacter "$ROOT_SUFFIX" "&" "\&amp;"
    replaceCharacter "$NEWSTR" "'" "\&apos;"
    replaceCharacter "$NEWSTR" '"' "\&quot;"
    replaceCharacter "$NEWSTR" "<" "\&lt;"
    replaceCharacter "$NEWSTR" ">" "\&gt;"
fi
    NORMALIZED_RS=$NEWSTR

if [ "$OSTYPE" = "Linux" ]; then
    replaceCharacter "$DEFAULTORG" "&" "\\\&amp;"
    replaceCharacter "$NEWSTR" "'" "\\\&apos;"
    replaceCharacter "$NEWSTR" '"' "\\\&quot;"
    replaceCharacter "$NEWSTR" "<" "\\\&lt;"
    replaceCharacter "$NEWSTR" ">" "\\\&gt;"
else
    replaceCharacter "$DEFAULTORG" "&" "\&amp;"
    replaceCharacter "$NEWSTR" "'" "\&apos;"
    replaceCharacter "$NEWSTR" '"' "\&quot;"
    replaceCharacter "$NEWSTR" "<" "\&lt;"
    replaceCharacter "$NEWSTR" ">" "\&gt;"
fi
    NORMALIZED_DEFAULTORG=$NEWSTR

if [ "$OSTYPE" = "Linux" ]; then
    replaceCharacter "$DEFAULTORG" "&" "\\\&"
else
    replaceCharacter "$DEFAULTORG" "&" "\&"
fi
    NORMAL_ORG=$NEWSTR

    RS_RDN=`echo $ORG_ROOT_SUFFIX | awk 'BEGIN { FS="=" } { print $2 }' | awk 'BEGIN { FS="," } { print $1 }' `
if [ "$OSTYPE" = "Linux" ]; then
    replaceCharacter "$RS_RDN" "&" "\\\&amp;"
    replaceCharacter "$NEWSTR" "'" "\\\&apos;"
    replaceCharacter "$NEWSTR" '"' "\\\&quot;"
    replaceCharacter "$NEWSTR" "<" "\\\&lt;"
    replaceCharacter "$NEWSTR" ">" "\\\&gt;"
else
    replaceCharacter "$RS_RDN" "&" "\&amp;"
    replaceCharacter "$NEWSTR" "'" "\&apos;"
    replaceCharacter "$NEWSTR" '"' "\&quot;"
    replaceCharacter "$NEWSTR" "<" "\&lt;"
    replaceCharacter "$NEWSTR" ">" "\&gt;"
fi
    RS_RDN=$NEWSTR

    if [ -z "$XML_ENCODING"  ];then 
    	TANS=`${JDK_BASE_DIR}/bin/java -classpath ${CLASSPATH} com.iplanet.am.util.getEncoding -http | awk ' { print $4 }' `
    	if [ "$TANS" != "" ]; then
    		XML_ENCODING=$TANS
    	else
    		XML_ENCODING="UTF-8"
    	fi
    	eval $ECHO "`$gettext 'XML Encoding is not set.found automatically to $XML_ENCODING'`"
    fi
    
    get_edit_files

    if [ "$NEW_INSTANCE" = "false" ]; then
        cd ${BINARY_DIR}/xml
	LOG_DIR=logs
	DEBUG_SUBDIR=debug
    else
        cd ${BINARY_DIR}/xml/$INSTANCE
	LOG_DIR=logs/$INSTANCE
	DEBUG_SUBDIR=debug/$INSTANCE
    fi
    if [ "$AM_REALM" = "enabled" ]; then
        REALM_MODE=true
        COEXIST_MODE=false
        AMSDK_I18N_KEY=a101
    else
        REALM_MODE=false
        COEXIST_MODE=true
	XML_COMMENT_START="<!--"
	XML_COMMENT_END="-->"
    fi
   
    # Seding start 
    for file in $EDIT_FILES; do
      $CP $file $file+
      sed -e "s#PLATDIR#$BASEDIR#g" \
       -e "s#\${DPRO_BASEDIR}#${BASEDIR}#g" \
       -e "s#\${BASE_DIR}#${BASEDIR}#g" \
       -e "s#\${JDK_BASE_DIR}#${JAVA_HOME}#g" \
       -e "s#\${JAVA_HOME}#${JAVA_HOME}#g" \
       -e "s#\${PRODUCT_DIR}#${PRODUCT_DIR}#g" \
       -e "s#NORMALIZED_RS#$NORMALIZED_RS#g" \
       -e "s#NORMALIZED_ORGBASE#$NORMALIZED_DEFAULTORG#g" \
       -e "s#BINARY_DIR#${BINARY_DIR}#g" \
       -e "s#TEMP_DIR_PREFIX#${TEMP_DIR_PREFIX}#g" \
       -e "s#DEBUG_DIR_PREFIX#${DEBUG_DIR_PREFIX}#g" \
       -e "s#CONFIG_DIR#${CONFIG_DIR}#g" \
       -e "s#JDK_PATH#${JAVA_HOME}#g" \
       -e "s#WEBSERVER_HOST#$WEBSERVER_HOST#g" \
       -e "s#SERVER_URL#$server_url#g" \
       -e "s#SERVER_HOST#$SERVER_HOST#g" \
       -e "s#SERVER_PORT#$SERVER_PORT#g" \
       -e "s#CONSOLE_HOST#$CONSOLE_HOST#g" \
       -e "s#CONSOLE_PORT#$CONSOLE_PORT#g" \
       -e "s#SERVER_PROTO#$SERVER_PROTOCOL#g" \
       -e "s#CONSOLE_PROTO#$CONSOLE_PROTOCOL#g" \
       -e "s#SERVER_DEPLOY_URI#$SERVER_DEPLOY_URI#g" \
       -e "s#CONSOLE_DEPLOY_URI#$CONSOLE_DEPLOY_URI#g" \
       -e "s#OLDCON_DEPLOY_URI#\/console#g" \
       -e "s#PASSWORD_DEPLOY_URI#$PASSWORD_DEPLOY_URI#g" \
       -e "s#COMMON_DEPLOY_URI#$COMMON_DEPLOY_URI#g" \
       -e "s#CONSOLE_REMOTE#$CONSOLE_REMOTE#g" \
       -e "s#BASEDIR#$BASEDIR#g" \
       -e "s#HOST_NAME#$HOST_NAME#g" \
       -e "s#FULLHOSTNAME#$SERVER_HOST#g" \
       -e "s#PRODUCT_DIR#$PRODUCT_DIR#g" \
       -e "s#AM_REALM#$REALM_MODE#g" \
       -e "s#AM_COEXIST#$COEXIST_MODE#g" \
       -e "s#AMSDK_I18N_KEY#$AMSDK_I18N_KEY#g" \
       -e "s#XML_COMMENT_START#$XML_COMMENT_START#g" \
       -e "s#XML_COMMENT_END#$XML_COMMENT_END#g" \
       -e "s#DIT_COMPLIANCE#$DIT_COMPLIANCE#g" \
       -e "s#ROOT_SUFFIX_HAT#$ROOT_SUFFIX_HAT#g" \
       -e "s#NM_ROOT_SUFFIX#$NM_ROOT_SUFFIX#g" \
       -e "s#NM_ORG_ROOT_SUFFIX#$NM_ORG_ROOT_SUFFIX#g" \
       -e "s#ORG_ROOT_SUFFIX#$NORMALIZED_DEFAULTORG#g" \
       -e "s#ROOT_SUFFIX#$NORMALIZED_RS#g" \
       -e "s#RS_RDN#$RS_RDN#g" \
       -e "s#ORG_BASE#$NORMAL_ORG#g" \
       -e "s#DCTREE_SUFFIX#$DCTREE_SUFFIX#g" \
       -e "s#GROUP_TYPE#$GROUP_TYPE#g" \
       -e "s#NM_INST_ORGANIZATION#$NM_INST_ORGANIZATION#g" \
       -e "s#INST_ORGANIZATION#$NORMAL_ORG#g" \
       -e "s#\${DIRECTORY_PORT}#${DS_PORT}#g" \
       -e "s#\${DIRECTORY_SERVER}#${DS_HOST}#g" \
       -e "s#DIRECTORY_PORT#${DS_PORT}#g" \
       -e "s#DIRECTORY_SERVER#${DS_HOST}#g" \
       -e "s#\${CONFIG_PORT}#${CONFIG_PORT}#g" \
       -e "s#\${CONFIG_SERVER}#${CONFIG_SERVER}#g" \
       -e "s#\${CONFIG_ADMINDN}#${CONFIG_ADMINDN}#g" \
       -e "s#CONFIG_PORT#${CONFIG_PORT}#g" \
       -e "s#CONFIG_SERVER#${CONFIG_SERVER}#g" \
       -e "s#CONFIG_ADMINDN#${CONFIG_ADMINDN}#g" \
       -e "s#SIMPLE_HOST#$DS_HOST#g" \
       -e "s#ENCLDAPUSERPASSWD#$ENCLDAPUSERPASSWD#g" \
       -e "s#HASHLDAPUSERPASSWD#$HASHLDAPUSERPASSWD#g" \
       -e "s#AMLDAPUSERPASSWD#$AMLDAPUSERPASSWD#g" \
       -e "s#ENCADMINPASSWD#$ENCADMINPASSWD#g" \
       -e "s#ENCADADMINPASSWD#$ENCADADMINPASSWD#g" \
       -e "s#HASHADMINPASSWD#$HASHADMINPASSWD#g" \
       -e "s#FLAT_FILE_USER_DIR#$FLAT_FILE_USER_DIR#g" \
       -e "s#ADMINPASSWD#$ADMINPASSWD#g" \
       -e "s#PROXUUSERPASSWORD#$ADMINPASSWD#g" \
       -e "s#INST_SERV_LIST#$SERV_LIST#g" \
       -e "s#INST_COOKIE_DOMAIN_LIST#$COOKIE_DOMAIN_LIST#g" \
       -e "s#SAML_SITEID#$SAMLSITEID#g" \
       -e "s#SERVER_URL#$serverservice_url#g" \
       -e "s#PROFILE_URL#$profileservice_url#g" \
       -e "s#SESSION_URL#$session_url#g" \
       -e "s#LOGGING_URL#$loggingservice_url#g" \
       -e "s#NOTIFICATION_URL#$notification_url#g" \
       -e "s#RUNTIME_DIR#$RUNTIME_DIR#g" \
       -e "s#PROFILE_HOST#$SERVER_HOST#g" \
       -e "s#PROFILE_PORT#$SERVER_PORT#g" \
       -e "s#DPRO_VERSION#$VERSION#g" \
       -e "s#CURRENT_PLATFORM_LOCALE#$PLATFORM_LOCALE#g" \
       -e "s#AVAILABLE_LOCALES#$AVAILABLE_LOCALES#g" \
       -e "s#XML_ENCODING#$XML_ENCODING#g" \
       -e "s#PLATFORM_LOCALE#$PLATFORM_LOCALE#g" \
       -e "s#UM_ENABLED#$UM_ENABLED#g" \
       -e "s#ORG_OBJECT_CLASS#$ORG_OBJECT_CLASS#g" \
       -e "s#ORG_NAMING_ATTR#$ORG_NAMING_ATTR#g" \
       -e "s#USER_NAMING_ATTR#$USER_NAMING_ATTR#g" \
       -e "s#USER_OBJECT_CLASS#$USER_OBJECT_CLASS#g" \
       -e "s#PRIMARY_NAMING_URL#$profileservice_url$SERVER_DEPLOY_URI/namingservice#g" \
       -e "s#PRIMARY_LOGIN_URL#$profileservice_url$SERVER_DEPLOY_URI/UI/Login#g" \
       -e "s#SHARED_SECRET#$ENCLDAPUSERPASSWD#g" \
       -e "s#FAILOVER_NAMING_URL##g" \
       -e "s#FAILOVER_LOGIN_URL##g" \
       -e "s#WEB_CONTAINER_TAG#$WEB_CONTAINER#g" \
       -e "s#NEW_OWNER#$NEW_OWNER#g" \
       -e "s#NEW_GROUP#$NEW_GROUP#g" \
       -e "s#JSSHOME#$JSSHOME#g" \
       -e "s#NSSHOME#$NSSHOME#g" \
       -e "s#WS_BASE_DIR#$WS61_HOME#g" \
       -e "s#WEBSVR_INSTANCE#$WS61_HOME#g" \
       -e "s#WSVR_INSTANCE#$WSVR_INSTANCE#g" \
       -e "s#NSPRHOME#$NSPRHOME#g" \
       -e "s#JAXPHOME#$JAXP_JAR_PATH#g" \
       -e "s#JAXP_LIB_DIR#$JAXP_JAR_PATH#g" \
       -e "s#JAVA_COMPONENT_PACKAGES#$JAVA_COMPONENT_PACKAGES#g" \
       -e "s#PAM_SERVICE_NAME#$PAM_SERVICE_NAME#g" \
       -e "s#IS_INSTALL_ETCDIR#$IS_INSTALL_ETCDIR#g" \
       -e "s#IS_INSTALL_VARDIR#$IS_INSTALL_VARDIR#g" \
       -e "s#IS_PRODNAME#$PRODUCT_DIR#g" \
       -e "s#TAG_JSS_SO_PATH#${JSS_PATH}#g" \
       -e "s#TAG_JSS_JAR_PATH#${JSS_JAR_PATH}#g" \
       -e "s#TAG_NSS_SO_PATH#${NSS_PATH}#g" \
       -e "s#TAG_NSPR_SO_PATH#${NSPR_PATH}#g" \
       -e "s#AMCONFIG#$AMCONFIG#g" \
       -e "s#LOG_DIR#$LOG_DIR#g" \
       -e "s#DEBUG_SUBDIR#$DEBUG_SUBDIR#g" \
       -e "s#COOKIE_ENCODE#$COOKIE_ENCODE#g" \
       -e "s#DEPLOY_URI#$SERVER_DEPLOY_URI#g" \
       -e "s#MFWK_JARS#$MFWK_JARS#g" \
       $file+ > $file
      $RM -f $file+
    done

    if [ "$ORG_NAMING_ATTR" != "o" ];then
      replace_line "$BINARY_DIR/war/WEB-INF/classes/amEntrySpecific.properties" "o=Name" "$ORG_NAMING_ATTR=Name"
    fi
}

copy_files() {
    mkdir -p ${RUNTIME_DIR}
    mkdir ${RUNTIME_DIR}/config
    mkdir ${RUNTIME_DIR}/xml
    $CP ${BINARY_DIR}/conf/* ${RUNTIME_DIR}/config/
    $CP ${BINARY_DIR}/xml/* ${RUNTIME_DIR}/xml/
}

#############################################################
###  Description - This script loads all the Access Manager 
###  Services Schema into the Directory Server.
#############################################################

get_edit_files() {
    $CP ${BINARY_DIR}/bin/amadmin.template ${BINARY_DIR}/bin/amadmin
    chmod 755 ${BINARY_DIR}/bin/amadmin
    $CP ${BINARY_DIR}/bin/ampassword.template ${BINARY_DIR}/bin/ampassword
    chmod 755 ${BINARY_DIR}/bin/ampassword
    $CP ${BINARY_DIR}/bin/amverifyarchive.template ${BINARY_DIR}/bin/amverifyarchive
    chmod 755 ${BINARY_DIR}/bin/amverifyarchive

    XML_FILES=`/bin/ls -1 ${RUNTIME_DIR}/xml/*.xml | $GREP -v amAuthConfig.xml | grep -v ums.xml | grep -v amAuth.xml | grep -v idRepoDefaults.xml | grep -v defaultDelegationPolicies.xml`
    XML_FILES="${RUNTIME_DIR}/xml/amAuthConfig.xml ${RUNTIME_DIR}/xml/amAuth.xml $XML_FILES"
    EDIT_FILES="${BINARY_DIR}/bin/amadmin ${RUNTIME_DIR}/config/AMConfig.properties ${RUNTIME_DIR}/config/serverconfig.xml ${BINARY_DIR}/war/index.html ${BINARY_DIR}/war/console/authentication/index.html ${BINARY_DIR}/war/console/base/index.html ${BINARY_DIR}/war/console/delegation/index.html ${BINARY_DIR}/war/console/dm/index.html ${BINARY_DIR}/war/console/idm/index.html ${BINARY_DIR}/war/console/images/index.html ${BINARY_DIR}/war/console/js/index.html ${BINARY_DIR}/war/console/policy/index.html ${BINARY_DIR}/war/console/realm/index.html ${BINARY_DIR}/war/console/service/index.html ${BINARY_DIR}/war/console/session/index.html ${BINARY_DIR}/war/console/user/index.html ${BINARY_DIR}/war/console/index.html ${BINARY_DIR}/bin/ampassword ${RUNTIME_DIR}/xml/idRepoDefaults.xml ${RUNTIME_DIR}/xml/defaultDelegationPolicies.xml ${RUNTIME_DIR}/xml/ums.xml ${BINARY_DIR}/bin/amverifyarchive $XML_FILES"
    AMCONFIG="AMConfig" 
}

##############################################################
#
# Load schema. Import services. Replace ${AMLDAPUSERPASSWD} with blank
#
load_schema() {

    eval $ECHO "`$gettext 'Loading service schema XML files ...'`"

    OPTIONS='-Dcom.sun.identity.sm.enableDataStoreNotification=false -DinstallTime=true' \
    $ADMIN_CLI --runasdn "cn=dsameuser,ou=DSAME Users,$ORG_BASE" -f "$FILE_ADMINPASSWD" -v --nolog --schema ${UMS_XML}
    
    if [ $? -ne 0 ]; then
        eval $ECHO "`$gettext 'Error occured while loading: ${UMS_XML}'`"
       	cleanup 1
    else
       	eval $ECHO "`$gettext 'Successfully loaded: ${UMS_XML}'`"
    fi
    
    OPTIONS='-Dcom.sun.identity.sm.enableDataStoreNotification=false -DinstallTime=true' \
    $ADMIN_CLI --runasdn "cn=dsameuser,ou=DSAME Users,$ORG_BASE" -f "$FILE_ADMINPASSWD" -v --nolog --schema $XML_FILES

    if [ $? -ne 0 ]; then
        eval $ECHO "`$gettext 'Error occured while loading: $XML_FILES'`"
       	cleanup 1
    else
       	eval $ECHO "`$gettext 'Successfully loaded: $XML_FILES'`"
    fi

    $ADMIN_CLI --runasdn "cn=dsameuser,ou=DSAME Users,$ORG_BASE" -f "$FILE_ADMINPASSWD" -v --nolog --data ${RUNTIME_DIR}/xml/idRepoDefaults.xml
    $ADMIN_CLI --runasdn "cn=dsameuser,ou=DSAME Users,$ORG_BASE" -f "$FILE_ADMINPASSWD" -v --nolog --data ${RUNTIME_DIR}/xml/defaultDelegationPolicies.xml
        

    for file in $XML_FILES; do
	$CP $file $file+
	sed -e "s#$AMLDAPUSERPASSWD##g" \
            -e "s#$ADMINPASSWD##g" \
            -e "s#$HASHADMINPASSWD##g" \
            -e "s#$HASHLDAPUSERPASSWD##g" \
           $file+ > $file
        $RM $file+
    done

    eval $ECHO "`$gettext 'Done loading service schema XML files.'`"
}

##############################################################
#
#                Create WAR file
#
create_war() {
    $CP -f ${RUNTIME_DIR}/config/AMConfig.properties ${BINARY_DIR}/war/WEB-INF/classes
    cd ${BINARY_DIR}/war;jar -cvf ${BINARY_DIR}/openfed.war *
}


##############################################################
#
#	    MAIN - STARTING MAIN ROUTINE

check_root_user

create_password_files

#set_path_for_config

config_tag_swap

# Load services irrespective of the DIRECTORY_MODE
load_schema

# create WAR
create_war
