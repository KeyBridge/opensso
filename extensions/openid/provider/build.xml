<?xml version="1.0"?>

<!-- ============================================================== -->
<!-- Ant XML file for openid war application                        -->
<!--                                                                -->
<!-- Copyright (c) 2002 Indigo Consulting, Inc. All rights reserved.-->
<!-- ============================================================== -->

<project name="openid" default="core" basedir=".">
	
  <property file="./build.properties" />

  <!-- App name-dependent settings. -->
  <property name="appname" value="openid"/>


  <!-- change this property to use a compiler other than javac. -->
  <property name="build.compiler" value="classic"/>
  
  <!-- Source file location. -->
  <property name="src" value="./src/java"/>
  <property name="src.root" value="./src"/>
  <property name="web.src" value="./web"/>

	

  <!-- Destination directory for the build -->
  <property name="build" value="./build"/>
  <property name="build.classesdir" value="${build}/classes"/>

  <property name="dist" value="./dist"/>
  <property name="lib.dir" value="./lib"/>


  
  <!-- Destination directory for the assembly targets -->
  <property name="assemble" value="./assemble"/>
  <property name="assemble.war" value="${assemble}/war"/>
  <property name="war" value="${appname}.war"/>



  <!-- ======================================================= -->
  <!-- Compile all classes.                                    -->
  <!-- ======================================================= -->
  <target name="compile">
<echo message="Classpath ${build.classpath}" />
    <mkdir dir="${build.classesdir}"/>
	<javac source="1.5" srcdir="${src}" destdir="${build.classesdir}" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
        <classpath>	   
	        <fileset dir="${lib.dir}">
	          <include name="**/*.jar"/>
	        </fileset>
	        <fileset dir="${j2ee.home}/lib">
	          <include name="javaee.jar"/>
	        </fileset>
		        	
        </classpath>
	</javac>
  </target> 

  <!-- ======================================================= -->
  <!-- Clean up various files and directories.                 -->
  <!-- ======================================================= -->

  <target name="clean_war">
    <delete dir="${assemble.war}"/>
  </target>
  <target name="clean_assemble">
    <delete dir="${assemble}"/>
  </target>
  <target name="clean" depends="clean_assemble">
    <delete dir="${build}"/>
  </target>

  <target name="fixforunix">
    <fixcrlf srcdir="${src}"
       cr="remove" eof="remove"
       includes="**/*.jsp,**/*.html,**/*.tld,**/*.xml,**/*.java,**/*.sh,**/*.sql"
    />
  </target>


  <!-- ======================================================= -->
  <!-- Assemble WAR module.                                    -->
  <!-- ======================================================= -->
  <target name="war" depends="clean_war,compile">
    <mkdir dir="${assemble.war}"/>
    <copy todir="${assemble.war}">
      <fileset dir="${web.src}" excludes="cvs,annontation"/>
    </copy>
    <copy todir="${assemble.war}/WEB-INF/classes/">
      <fileset dir="${build.classesdir}/"/>
    </copy>


<!--
    <copy  todir="${assemble.war}/WEB-INF/classes">
      <fileset dir="${src}" includes="*.properties"/>
    </copy>
-->
  	
    <copy  todir="${assemble.war}/WEB-INF/lib">
      <fileset dir="${lib.dir}" includes="*.jar"/>
    </copy>
    
    
    <jar jarfile="${build}/${war}"
       basedir="${assemble.war}"/>
  	
  	<delete dir="${assemble}"/>
  </target>
	
  <target name="dist" depends="war">
		
		<delete dir="${dist}" />
    	<copy  todir="${dist}/lib"> <fileset dir="${lib.dir}" includes="*.jar"/></copy>
  		<copy  todir="${dist}/src"> <fileset dir="${src.root}" includes="**/*.*"/></copy>
  		<copy  todir="${dist}/web"> <fileset dir="${web.src}" includes="**/*.*"/></copy>
  		<copy todir="${dist}/" file="./README" />
  	    <copy todir="${dist}/" file="./build.xml" />
  	    <copy todir="${dist}/" file="./build.properties" />
	
		  <zip destfile="${build}/${appname}.zip"
		       basedir="${dist}/"
		       update="true"
		  />
		
  		<delete dir="${dist}" />

	</target>




  <target name="core" depends="compile, war" />
  <target name="all" depends="core" />


</project>